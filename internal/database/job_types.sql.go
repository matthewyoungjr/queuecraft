// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: job_types.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJobType = `-- name: CreateJobType :many
INSERT INTO job_types(name)
VALUES
('send_email'), 
('send_push_notification'), 
('send_sms')
RETURNING id, name
`

type CreateJobTypeRow struct {
	ID   int32
	Name pgtype.Text
}

func (q *Queries) CreateJobType(ctx context.Context) ([]CreateJobTypeRow, error) {
	rows, err := q.db.Query(ctx, createJobType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CreateJobTypeRow
	for rows.Next() {
		var i CreateJobTypeRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJobTypeById = `-- name: GetJobTypeById :one
SELECT id, name 
FROM job_types
WHERE id = $1
`

type GetJobTypeByIdRow struct {
	ID   int32
	Name pgtype.Text
}

func (q *Queries) GetJobTypeById(ctx context.Context, dollar_1 pgtype.Int4) (GetJobTypeByIdRow, error) {
	row := q.db.QueryRow(ctx, getJobTypeById, dollar_1)
	var i GetJobTypeByIdRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listJobTypes = `-- name: ListJobTypes :many
SELECT id, name 
FROM job_types
ORDER BY name
`

type ListJobTypesRow struct {
	ID   int32
	Name pgtype.Text
}

func (q *Queries) ListJobTypes(ctx context.Context) ([]ListJobTypesRow, error) {
	rows, err := q.db.Query(ctx, listJobTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListJobTypesRow
	for rows.Next() {
		var i ListJobTypesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
