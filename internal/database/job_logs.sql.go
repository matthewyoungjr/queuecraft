// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: job_logs.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJobLog = `-- name: CreateJobLog :one
INSERT INTO job_logs(
    id, job_id, user_id, message, attempts, 
    duration_ms, created_at
)
VALUES(
    DEFAULT, 
    $1, -- job_id 
    $2, -- user id 
    $3, -- message 
    $4, -- attempts
    $5, -- duration_ms 
    $6 -- created_at 
)
RETURNING id, job_id, user_id, message, attempts, duration_ms, created_at
`

type CreateJobLogParams struct {
	Column1 pgtype.UUID
	Column2 pgtype.UUID
	Column3 pgtype.Text
	Column4 pgtype.Int2
	Column5 pgtype.Int4
	Column6 pgtype.Timestamp
}

type CreateJobLogRow struct {
	ID         int32
	JobID      pgtype.UUID
	UserID     pgtype.UUID
	Message    pgtype.Text
	Attempts   pgtype.Int2
	DurationMs pgtype.Int4
	CreatedAt  pgtype.Timestamp
}

func (q *Queries) CreateJobLog(ctx context.Context, arg CreateJobLogParams) (CreateJobLogRow, error) {
	row := q.db.QueryRow(ctx, createJobLog,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
	)
	var i CreateJobLogRow
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.UserID,
		&i.Message,
		&i.Attempts,
		&i.DurationMs,
		&i.CreatedAt,
	)
	return i, err
}

const listAllLogs = `-- name: ListAllLogs :many
SELECT id, job_id, user_id, message, attempts, duration_ms, created_at 
FROM job_logs
ORDER BY id
`

type ListAllLogsRow struct {
	ID         int32
	JobID      pgtype.UUID
	UserID     pgtype.UUID
	Message    pgtype.Text
	Attempts   pgtype.Int2
	DurationMs pgtype.Int4
	CreatedAt  pgtype.Timestamp
}

func (q *Queries) ListAllLogs(ctx context.Context) ([]ListAllLogsRow, error) {
	rows, err := q.db.Query(ctx, listAllLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllLogsRow
	for rows.Next() {
		var i ListAllLogsRow
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.UserID,
			&i.Message,
			&i.Attempts,
			&i.DurationMs,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLogsPaginated = `-- name: ListLogsPaginated :many
SELECT id, job_id, user_id, message, attempts, duration_ms, created_at
FROM job_logs
LIMIT $1 OFFSET $2
`

type ListLogsPaginatedParams struct {
	Column1 pgtype.Int8
	Column2 pgtype.Int8
}

type ListLogsPaginatedRow struct {
	ID         int32
	JobID      pgtype.UUID
	UserID     pgtype.UUID
	Message    pgtype.Text
	Attempts   pgtype.Int2
	DurationMs pgtype.Int4
	CreatedAt  pgtype.Timestamp
}

func (q *Queries) ListLogsPaginated(ctx context.Context, arg ListLogsPaginatedParams) ([]ListLogsPaginatedRow, error) {
	rows, err := q.db.Query(ctx, listLogsPaginated, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLogsPaginatedRow
	for rows.Next() {
		var i ListLogsPaginatedRow
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.UserID,
			&i.Message,
			&i.Attempts,
			&i.DurationMs,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
