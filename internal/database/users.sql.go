// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(id, full_name, email, password, created_at)
VALUES(
    gen_random_uuid(), 
    $1, -- full_name
    $2, -- email
    $3, -- password
    NOW()
)

RETURNING id, full_name, email, created_at
`

type CreateUserParams struct {
	Column1 pgtype.Text
	Column2 pgtype.Text
	Column3 pgtype.Text
}

type CreateUserRow struct {
	ID        pgtype.UUID
	FullName  string
	Email     string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Column1, arg.Column2, arg.Column3)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :one
DELETE FROM users 
WHERE id = $1
RETURNING id, full_name, email, created_at
`

type DeleteUserByIdRow struct {
	ID        pgtype.UUID
	FullName  string
	Email     string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) DeleteUserById(ctx context.Context, dollar_1 pgtype.UUID) (DeleteUserByIdRow, error) {
	row := q.db.QueryRow(ctx, deleteUserById, dollar_1)
	var i DeleteUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, full_name, email, password
FROM users 
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID       pgtype.UUID
	FullName string
	Email    string
	Password string
}

func (q *Queries) GetUserByEmail(ctx context.Context, dollar_1 pgtype.Text) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, dollar_1)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, full_name, email, created_at
FROM users
WHERE id = $1
`

type GetUserByIdRow struct {
	ID        pgtype.UUID
	FullName  string
	Email     string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetUserById(ctx context.Context, dollar_1 pgtype.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, dollar_1)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
